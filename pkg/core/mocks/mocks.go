// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/nerdoftech/go-midi-xlate/pkg/core"
	midi "gitlab.com/gomidi/midi"
)

// MockSendMidi is a mock of SendMidi interface.
type MockSendMidi struct {
	ctrl     *gomock.Controller
	recorder *MockSendMidiMockRecorder
}

// MockSendMidiMockRecorder is the mock recorder for MockSendMidi.
type MockSendMidiMockRecorder struct {
	mock *MockSendMidi
}

// NewMockSendMidi creates a new mock instance.
func NewMockSendMidi(ctrl *gomock.Controller) *MockSendMidi {
	mock := &MockSendMidi{ctrl: ctrl}
	mock.recorder = &MockSendMidiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendMidi) EXPECT() *MockSendMidiMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSendMidi) Send(msg midi.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", msg)
}

// Send indicates an expected call of Send.
func (mr *MockSendMidiMockRecorder) Send(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendMidi)(nil).Send), msg)
}

// MockNoteHandler is a mock of NoteHandler interface.
type MockNoteHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNoteHandlerMockRecorder
}

// MockNoteHandlerMockRecorder is the mock recorder for MockNoteHandler.
type MockNoteHandlerMockRecorder struct {
	mock *MockNoteHandler
}

// NewMockNoteHandler creates a new mock instance.
func NewMockNoteHandler(ctrl *gomock.Controller) *MockNoteHandler {
	mock := &MockNoteHandler{ctrl: ctrl}
	mock.recorder = &MockNoteHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteHandler) EXPECT() *MockNoteHandlerMockRecorder {
	return m.recorder
}

// HandleNote mocks base method.
func (m *MockNoteHandler) HandleNote(note core.Note) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleNote", note)
}

// HandleNote indicates an expected call of HandleNote.
func (mr *MockNoteHandlerMockRecorder) HandleNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNote", reflect.TypeOf((*MockNoteHandler)(nil).HandleNote), note)
}
